// Generated by CoffeeScript 1.6.3
var App, D3Component, d3;

d3 = window.d3;

D3Component = (function() {
  D3Component.prototype.selector = '#d3-window';

  D3Component.prototype.$el = null;

  D3Component.prototype.svg = null;

  D3Component.prototype.json = null;

  function D3Component() {
    this._initJSON();
    this._initEl();
    this._initSVG();
  }

  D3Component.prototype._initJSON = function() {
    return this.json = this._generateJSONSineWave();
  };

  D3Component.prototype._generateJSONSineWave = function() {
    var deg, hertz, i, rad, rad_base, ret, _i;
    ret = [];
    rad_base = Math.PI / 180;
    hertz = 11.25;
    for (i = _i = 0; _i < 1024; i = ++_i) {
      deg = i * hertz;
      rad = deg * rad_base;
      ret.push({
        x: i,
        y: Math.sin(rad)
      });
    }
    return ret;
  };

  D3Component.prototype._initEl = function() {
    this.$el = $(this.selector);
    this.windowWidth = this.$el.width();
    return this.windowHeight = this.$el.height();
  };

  D3Component.prototype._initSVG = function() {
    var d3X, d3Y, d3line, height, margin, parseDate, width, xAxis, yAxis,
      _this = this;
    margin = {
      top: 20,
      right: 20,
      bottom: 30,
      left: 50
    };
    width = this.windowWidth - margin.left - margin.right;
    height = this.windowHeight - margin.top - margin.bottom;
    parseDate = d3.time.format('%d-%b-%y').parse;
    d3X = d3.scale.linear().range([0, width]);
    d3Y = d3.scale.linear().range([height, 0]);
    xAxis = d3.svg.axis().scale(d3X).orient('bottom');
    yAxis = d3.svg.axis().scale(d3Y).orient('left');
    d3line = d3.svg.line().x(function(d) {
      return d3X(d.x);
    }).y(function(d) {
      return d3Y(d.y);
    });
    this.svg = d3.selectAll('#d3-window').append('svg').attr('width', this.windowWidth).attr('height', this.windowHeight).append('g').attr('transform', "translate(" + margin.left + "," + margin.top + ")");
    d3X.domain(d3.extent(this.json, function(d) {
      return d.x;
    }));
    d3Y.domain(d3.extent(this.json, function(d) {
      return d.y;
    }));
    this.svg.append('g').attr('class', 'x axis').attr('transform', "translate(0," + height + ")").call(xAxis);
    this.svg.append('g').attr('class', 'y axis').call(yAxis).append('text').attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text("value Y");
    return this.svg.append('path').datum(this.json).attr('class', 'line').attr('d', d3line);
  };

  return D3Component;

})();

App = (function() {
  function App() {}

  App.prototype.run = function() {
    $(document).ready(function() {
      return this.d3Component = new D3Component();
    });
  };

  return App;

})();

window.app = new App();

app.run();
