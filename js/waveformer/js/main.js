// Generated by CoffeeScript 1.10.0
(function() {
  var App, D3Component;

  D3Component = (function() {
    D3Component.prototype.selector = '#d3-window';

    D3Component.prototype.$el = null;

    D3Component.prototype.numberOfLayers = 20;

    D3Component.prototype.numberOfSamples = 200;

    D3Component.prototype.layers0 = null;

    D3Component.prototype.layers1 = null;

    D3Component.prototype.windowWidth = 960;

    D3Component.prototype.windowHeight = 500;

    D3Component.prototype.graphX = null;

    D3Component.prototype.graphY = null;

    D3Component.prototype.color = null;

    D3Component.prototype.area = null;

    D3Component.prototype.svg = null;

    D3Component.prototype.durationTime = 2500;

    function D3Component() {
      this.$el = $(this.selector);
      this.init();
      this.initSVG();
    }

    D3Component.prototype.init = function() {
      var getMaxY, stack;
      stack = window.d3.layout.stack().offset("wiggle");
      this.layers0 = stack(window.d3.range(this.numberOfLayers).map((function(_this) {
        return function() {
          return _this.bumpLayer();
        };
      })(this)));
      this.layers1 = stack(window.d3.range(this.numberOfLayers).map((function(_this) {
        return function() {
          return _this.bumpLayer();
        };
      })(this)));
      this.graphX = window.d3.scale.linear().domain([0, this.numberOfSamples - 1]).range([0, this.windowWidth]);
      getMaxY = (function(_this) {
        return function() {
          return window.d3.max(_this.layers0.concat(_this.layers1), function(layer) {
            return window.d3.max(layer, function(d) {
              return d.y0 + d.y;
            });
          });
        };
      })(this);
      this.graphY = window.d3.scale.linear().domain([0, getMaxY()]).range([this.windowHeight, 0]);
      this.color = window.d3.scale.linear().range(['#aad', '#556']);
      return this.area = window.d3.svg.area().x((function(_this) {
        return function(d) {
          return _this.graphX(d.x);
        };
      })(this)).y0((function(_this) {
        return function(d) {
          return _this.graphY(d.y0);
        };
      })(this)).y1((function(_this) {
        return function(d) {
          return _this.graphY(d.y0 + d.y);
        };
      })(this));
    };

    D3Component.prototype.initSVG = function() {
      this.svg = window.d3.selectAll(this.$el).append('svg').attr('width', this.windowWidth).attr('height', this.windowHeight);
      return this.svg.selectAll('path').data(this.layers0).enter().append('path').attr('d', this.area).style('fill', (function(_this) {
        return function() {
          return _this.color(Math.random());
        };
      })(this));
    };

    D3Component.prototype.transition = function() {
      return window.d3.selectAll('path').data((function(_this) {
        return function() {
          var d;
          d = _this.layers1;
          _this.layers1 = _this.layers0;
          return _this.layers0 = d;
        };
      })(this)).transition().duration(this.durationTime).attr('d', this.area);
    };

    D3Component.prototype._bump = function(array) {
      var i, j, ref, results, w, x, y, z;
      x = 1 / (.1 + Math.random());
      y = 2 * Math.random() - .5;
      z = 10 / (.1 + Math.random());
      results = [];
      for (i = j = 0, ref = this.numberOfSamples; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        w = (i / this.numberOfSamples - y) * z;
        results.push(array[i] += x * Math.exp(-w * w));
      }
      return results;
    };

    D3Component.prototype.bumpLayer = function() {
      var array, i, j, k, ref;
      array = [];
      for (i = j = 0, ref = this.numberOfSamples; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        array[i] = 0;
      }
      for (i = k = 0; k < 5; i = ++k) {
        this._bump(array);
      }
      return array.map(function(d, i) {
        return {
          x: i,
          y: Math.max(0, d)
        };
      });
    };

    return D3Component;

  })();

  App = (function() {
    function App() {}

    App.prototype.run = function() {
      $(document).ready(function() {
        this.d3Component = new D3Component();
        return $('[js-update]').on('click', (function(_this) {
          return function() {
            return _this.d3Component.transition();
          };
        })(this));
      });
    };

    return App;

  })();

  window.app = new App();

  app.run();

}).call(this);
